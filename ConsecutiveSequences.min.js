algorithms=new function(){var bigInt=require("BigInteger.min.js");this.numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCounts=function(numElements,mcsSpecificationByLengthsAndCounts){var mcsSpecificationByLengthsAndCountsAsArray=new Array(numElements+1);var arrayOfRequestedMaximalConsecutiveSequenceLengths;var numRequestedMaximalConsecutiveSequenceLengths;var requestedLength;var requestedLengthAsInt;var requestedCount;var requestedCountAsBigInt;var bigZero=bigInt.zero;var i,j;for(i=0;i<numElements+1;++i){mcsSpecificationByLengthsAndCountsAsArray[i]=bigZero}arrayOfRequestedMaximalConsecutiveSequenceLengths=Object.keys(mcsSpecificationByLengthsAndCounts);numRequestedMaximalConsecutiveSequenceLengths=arrayOfRequestedMaximalConsecutiveSequenceLengths.length;for(j=0;j<numRequestedMaximalConsecutiveSequenceLengths;++j){requestedLength=arrayOfRequestedMaximalConsecutiveSequenceLengths[j];requestedLengthAsInt=parseInt(requestedLength,10);requestedCount=mcsSpecificationByLengthsAndCounts[requestedLength];requestedCountAsBigInt=bigInt(requestedCount);if(requestedLengthAsInt<=numElements){mcsSpecificationByLengthsAndCountsAsArray[requestedLengthAsInt]=requestedCount}else if(requestedCountAsBigInt.gt(bigZero)){return bigZero}}return numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCountsInternal.call(this,numElements,mcsSpecificationByLengthsAndCountsAsArray)};this.numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts=function(numElements,selectionCondition){var numElementsBig=bigInt(numElements);var minLength=selectionCondition.noMaximalConsecutiveSequencesOfLengthLessThan?selectionCondition.noMaximalConsecutiveSequencesOfLengthLessThan:2;var maxLength=selectionCondition.noMaximalConsecutiveSequencesOfLengthGreaterThan?selectionCondition.noMaximalConsecutiveSequencesOfLengthGreaterThan:numElements;var result=bigInt.zero;var mcsSpecificationByLengthsAndCounts=new Array;var i;if(minLength>numElements){return bigInt.zero}if(minLength>maxLength){return this.numberOfPermutationsWithNoConsecutiveSequences(numElements)}maxLength=Math.min(maxLength,numElements);for(i=0;i<numElements+1;++i){mcsSpecificationByLengthsAndCounts.push(bigInt.zero)}numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCountsRecursive.call(this,numElementsBig,maxLength,selectionCondition);function numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCountsRecursive(numElementsRecursive,lengthRecursive,selectionCondition){var bigZero=bigInt.zero;var bigOne=bigInt.one;var maxNumMaximalConsecutiveSequencesOfRecursiveLength;var numMaximalConsecutiveSequencesOfRecursiveLength;if(lengthRecursive<minLength||numElementsRecursive.lt(minLength)){if(selectionCondition.acceptMcsSpecification(mcsSpecificationByLengthsAndCounts)){result=result.plus(numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCountsInternal.call(this,numElementsBig,mcsSpecificationByLengthsAndCounts))}return}maxNumMaximalConsecutiveSequencesOfRecursiveLength=numElementsRecursive.over(lengthRecursive);for(numMaximalConsecutiveSequencesOfRecursiveLength=bigZero;numMaximalConsecutiveSequencesOfRecursiveLength.leq(maxNumMaximalConsecutiveSequencesOfRecursiveLength);numMaximalConsecutiveSequencesOfRecursiveLength=numMaximalConsecutiveSequencesOfRecursiveLength.plus(bigOne)){mcsSpecificationByLengthsAndCounts[lengthRecursive]=numMaximalConsecutiveSequencesOfRecursiveLength;numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCountsRecursive.call(this,numElementsRecursive.minus(numMaximalConsecutiveSequencesOfRecursiveLength.times(lengthRecursive)),lengthRecursive-1,selectionCondition);mcsSpecificationByLengthsAndCounts[lengthRecursive]=bigZero}}return result};this.getNewSelectionCondition=function(acceptMcsSpecification,noMaximalConsecutiveSequencesOfLengthLessThan,noMaximalConsecutiveSequencesOfLengthGreaterThan){return new SelectionCondition(acceptMcsSpecification,noMaximalConsecutiveSequencesOfLengthLessThan,noMaximalConsecutiveSequencesOfLengthGreaterThan)};this.numberOfPermutationsWithMaximalConsecutiveSequencesOnlyInLengthRange=function(numElements,minLength,maxLength){var acceptMcsSpecification=function(mcsSpecificationByLengthsAndCounts){var bigZero=bigInt.zero;var i;if(minLength>numElements){return false}for(i=minLength;i<=maxLength;++i){if(mcsSpecificationByLengthsAndCounts[i].gt(bigZero)){return true}}return false};return this.numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts(numElements,this.getNewSelectionCondition(acceptMcsSpecification,minLength,maxLength))};this.numberOfPermutationsWithAtLeastOneMaximalConsecutiveSequenceOfLengthGreaterThanOrEqualTo=function(numElements,minLength){var acceptMcsSpecification=function(mcsSpecificationByLengthsAndCounts){return true};return factorialExt(bigInt.one,bigInt(numElements)).minus(this.numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts(numElements,this.getNewSelectionCondition(acceptMcsSpecification,undefined,minLength-1)))};this.numberOfPermutationsWithAtLeastOneConsecutiveSequenceOfLength=function(numElements,length){return this.numberOfPermutationsWithAtLeastOneMaximalConsecutiveSequenceOfLengthGreaterThanOrEqualTo(numElements,length)};this.numberOfPermutationsWithGivenNumberOfConsecutiveSequencesOfLength=function(numElements,length,count){var maxLength=Math.min(length+count-1,numElements);var acceptMcsSpecification=function(mcsSpecificationByLengthsAndCounts){var bigZero=bigInt.zero;var bigOne=bigInt.one;var bigCount=bigInt(count);var bigLengthMinusOne=bigInt(length).minus(bigOne);var i;var countForThisMcsSpecification=bigZero;for(i=length;i<=maxLength;++i){countForThisMcsSpecification=countForThisMcsSpecification.plus(mcsSpecificationByLengthsAndCounts[i].times(i-bigLengthMinusOne));if(countForThisMcsSpecification.gt(bigCount)){return false}}if(countForThisMcsSpecification.eq(bigCount)){return true}return false};return this.numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts(numElements,this.getNewSelectionCondition(acceptMcsSpecification,undefined,maxLength))};this.numberOfPermutations=function(numElements){return factorialExt(bigInt(2),bigInt(numElements))};this.numberOfPermutationsWithNoConsecutiveSequences=function(numElementsIn){var numElements=bigInt(numElementsIn);var bigOne=bigInt.one;var bigTwo=bigInt[2];var bigThree=bigInt[3];var twoPreviousValues=[bigOne,bigOne];var newValue;var i;if(numElements.eq(bigOne)||numElements.eq(bigTwo)){return bigOne}for(i=bigThree;i.leq(numElements);i=i.plus(bigOne)){newValue=i.minus(bigOne).times(twoPreviousValues[1]).plus(i.minus(bigTwo).times(twoPreviousValues[0]));twoPreviousValues[0]=twoPreviousValues[1];twoPreviousValues[1]=newValue}return newValue};this.numberOfPermutationsByConsecutivePairCount=function(numElements){return numberOfPermutationsByConsecutivePairCountInternal(numElements).slice(1,numElements+1);function numberOfPermutationsByConsecutivePairCountInternal(numElementsIn){var numElementsBig=bigInt(numElementsIn);var bigOne=bigInt.one;var bigZero=bigInt.zero;var previousCounts;var counts;var i;var iBig;if(numElementsIn==1){return[bigZero,bigOne,bigZero,bigZero]}previousCounts=numberOfPermutationsByConsecutivePairCountInternal(numElementsIn-1);counts=new Array;counts.push(bigZero);for(i=1,iBig=bigOne;i<=numElementsIn;++i,iBig=iBig.plus(bigOne)){counts.push(previousCounts[i-1].plus(previousCounts[i].times(numElementsBig.minus(iBig))).plus(previousCounts[i+1].times(iBig)))}counts.push(bigZero,bigZero);return counts}};function numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCountsInternal(numElementsIn,mcsSpecificationByLengthsAndCounts){var numElements=bigInt(numElementsIn);var bigZero=bigInt.zero;var bigOne=bigInt.one;var i;var numMaximalConsecutiveSequencesOfRequestedLength;var requestedLength;var combinedLengthOfRequestedMaximalConsecutiveSequences=bigZero;var numRequestedMaximalConsecutiveSequencesTotal=bigZero;var numBasePermutations;var numBaseElements;var numMaximalConsecutiveSequenceConfigurations=bigOne;var result;for(i=2;i<=numElementsIn;++i){requestedLength=bigInt(i);numMaximalConsecutiveSequencesOfRequestedLength=bigInt(mcsSpecificationByLengthsAndCounts[i]);combinedLengthOfRequestedMaximalConsecutiveSequences=combinedLengthOfRequestedMaximalConsecutiveSequences.plus(requestedLength.times(numMaximalConsecutiveSequencesOfRequestedLength));if(combinedLengthOfRequestedMaximalConsecutiveSequences.gt(numElements)){return bigZero}numRequestedMaximalConsecutiveSequencesTotal=numRequestedMaximalConsecutiveSequencesTotal.plus(numMaximalConsecutiveSequencesOfRequestedLength)}numBaseElements=numElements.minus(combinedLengthOfRequestedMaximalConsecutiveSequences.minus(numRequestedMaximalConsecutiveSequencesTotal));numBasePermutations=this.numberOfPermutationsWithNoConsecutiveSequences(numBaseElements);numMaximalConsecutiveSequenceConfigurations=factorialExt(numBaseElements.minus(numRequestedMaximalConsecutiveSequencesTotal.minus(bigOne)),numBaseElements);mcsSpecificationByLengthsAndCounts.forEach(function(numRequested){var numRequestedBig=bigInt(numRequested);if(numRequestedBig.gt(0)){numMaximalConsecutiveSequenceConfigurations=numMaximalConsecutiveSequenceConfigurations.divide(factorialExt(bigOne,bigInt(numRequestedBig)))}});result=numBasePermutations.times(numMaximalConsecutiveSequenceConfigurations);return result}function factorialExt(fromAndIncluding,toAndIncluding){var currentFactor=fromAndIncluding;var product=bigInt.one;for(;currentFactor.leq(toAndIncluding);currentFactor=currentFactor.plus(1)){product=product.times(currentFactor)}return product}function SelectionCondition(acceptMcsSpecification,noMaximalConsecutiveSequencesOfLengthLessThan,noMaximalConsecutiveSequencesOfLengthGreaterThan){this.acceptMcsSpecification=acceptMcsSpecification;this.noMaximalConsecutiveSequencesOfLengthLessThan=noMaximalConsecutiveSequencesOfLengthLessThan;this.noMaximalConsecutiveSequencesOfLengthGreaterThan=noMaximalConsecutiveSequencesOfLengthGreaterThan}};module.exports={numberOfPermutations:algorithms.numberOfPermutations,numberOfPermutationsWithNoConsecutiveSequences:algorithms.numberOfPermutationsWithNoConsecutiveSequences,numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCounts:algorithms.numberOfPermutationsThatMeetAnMcsSpecificationByLengthsAndCounts,numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts:algorithms.numberOfPermutationsThatMeetCertainMcsSpecificationsByLengthsAndCounts,getNewSelectionCondition:algorithms.getNewSelectionCondition,numberOfPermutationsWithAtLeastOneMaximalConsecutiveSequenceOfLengthGreaterThanOrEqualTo:algorithms.numberOfPermutationsWithAtLeastOneMaximalConsecutiveSequenceOfLengthGreaterThanOrEqualTo,numberOfPermutationsWithMaximalConsecutiveSequencesOnlyInLengthRange:algorithms.numberOfPermutationsWithMaximalConsecutiveSequencesOnlyInLengthRange,numberOfPermutationsWithAtLeastOneConsecutiveSequenceOfLength:algorithms.numberOfPermutationsWithAtLeastOneConsecutiveSequenceOfLength,numberOfPermutationsWithGivenNumberOfConsecutiveSequencesOfLength:algorithms.numberOfPermutationsWithGivenNumberOfConsecutiveSequencesOfLength,numberOfPermutationsByConsecutivePairCount:algorithms.numberOfPermutationsByConsecutivePairCount};